#pragma once

#ifndef __F3D_TYPES_H
#define __F3D_TYPES_H

#include <cstdint>

namespace f3d {

	typedef uint32_t				F3D_Flags;
	typedef uint64_t				F3D_Mask;

	typedef enum					eColorType {
		F3D_COLOR_UNDEFINED = 0x0,
		F3D_COLOR_AMBIENT = 0x1,
		F3D_COLOR_DIFFUSE = 0x2,
		F3D_COLOR_SPECULAR = 0x4,
		F3D_COLOR_EMISSIVE = 0x8,
		F3D_COLOR_REFLECTIVE = 0x10,
		F3D_COLOR_BEGIN_RANGE = F3D_COLOR_UNDEFINED,
		F3D_COLOR_END_RANGE = F3D_COLOR_REFLECTIVE,
		F3D_COLOR_RANG_SIZE = (F3D_COLOR_END_RANGE - F3D_COLOR_BEGIN_RANGE + 1),
		F3D_COLOR_MAX_ENUM = 0x7FFFFFFF
	}								eColorTypeBits;
	typedef F3D_Flags				ColorTypeFlags;

	typedef enum					eTextureType {
		F3D_TEXTURE_UNDEFINED = 0x0,
		F3D_TEXTURE_DIFFUSE = 0x1,
		F3D_TEXTURE_SPECULAR = 0x2,
		F3D_TEXTURE_AMBIENT = 0x4,
		F3D_TEXTURE_EMISSIVE = 0x8,
		F3D_TEXTURE_HEIGHT = 0x10,
		F3D_TEXTURE_NORMALS = 0x20,
		F3D_TEXTURE_SHININESS = 0x40,
		F3D_TEXTURE_OPACITY = 0x80,
		F3D_TEXTURE_DISPLACEMENT = 0x100,
		F3D_TEXTURE_LIGHTMAP = 0x200,
		F3D_TEXTURE_REFLECTION = 0x400,
		F3D_TEXTURE_BEGIN_RANGE = F3D_TEXTURE_UNDEFINED,
		F3D_TEXTURE_END_RANGE = F3D_TEXTURE_REFLECTION,
		F3D_TEXTURE_RANGE_SIZE = (F3D_TEXTURE_END_RANGE - F3D_TEXTURE_BEGIN_RANGE + 1),
		F3D_TEXTURE_MAX_ENUM = 0x7FFFFFFF
	}								eTextureTypeBits;
	typedef F3D_Flags				TextureTypeFlags;

	typedef enum					eTextureAddressMode {
		F3D_ADDRESS_UNDEFINED = 0,
		F3D_ADDRESS_REPEAT = 1,
		F3D_ADDRESS_CLAMP_EDGE = 2,
		F3D_ADDRESS_CLAMP_BORDER = 3,
		F3D_ADDRESS_MIRROR_REPEAT = 4,
		F3D_ADDRESS_MIRROR_CLAMP = 5,
		F3D_ADDRESS_BEGIN_RANGE = F3D_ADDRESS_UNDEFINED,
		F3D_ADDRESS_END_RANGE = F3D_ADDRESS_MIRROR_CLAMP,
		F3D_ADDRESS_RANGE_SIZE = (F3D_ADDRESS_END_RANGE - F3D_ADDRESS_BEGIN_RANGE + 1),
		F3D_ADDRESS_MAX_ENUM = 0x7FFFFFFF
	}								eTextureAddressMode;

	typedef enum					eLightType {
		F3D_LIGHT_UNDEFINED = 0x0,
		F3D_LIGHT_DIRECTIONAL = 0x1,
		F3D_LIGHT_POINT = 0x2,
		F3D_LIGHT_SPOT = 0x3,
		F3D_LIGHT_BEGIN_RANGE = F3D_LIGHT_UNDEFINED,
		F3D_LIGHT_END_RANGE = F3D_LIGHT_SPOT,
		F3D_LIGHT_RANGE_SIZE = (F3D_LIGHT_END_RANGE - F3D_LIGHT_BEGIN_RANGE + 1),
		F3D_LIGHT_MAX_ENUM = 0x7FFFFFFF
	}								eLightTypeBits;
	typedef F3D_Flags				LightTypeFlags;

	typedef enum					eShaderInterfaceTypeBits {
		F3D_SHADER_UNDEFINED = 0x00,
		F3D_SHADER_COLOR_AMBIENT = 0x02,
		F3D_SHADER_COLOR_DIFFUSE = 0x04,
		F3D_SHADER_COLOR_SPECULAR = 0x08,
		F3D_SHADER_COLOR_EMISSIVE = 0x10,
		F3D_SHADER_LIGHT_DIRECTIONAL = 0x20,
		F3D_SHADER_LIGHT_POINT = 0x40,
		F3D_SHADER_LIGHT_SPOT = 0x80,
		F3D_SHADER_UNIFORM_CAMERA = 0x100,
		F3D_SHADER_UNIFORM_MODEL = 0x200,
		F3D_SHADER_UNIFORM_MATERIAL = 0x400,
		F3D_SHADER_UNIFORM_LIGHT = 0x800,
		F3D_SHADER_UNIFORM_SAMPLER_AMBIENT = 0x1000,
		F3D_SHADER_UNIFORM_SAMPLER_DIFFUSE = 0x2000,
		F3D_SHADER_UNIFORM_SAMPLER_SPECULAR = 0x4000,
		F3D_SHADER_UNIFORM_SAMPLER_EMISSIVE = 0x8000,
		F3D_SHADER_UNIFORM_SAMPLER_HEIGHT = 0x10000,
		F3D_SHADER_UNIFORM_SAMPLER_NORMALS = 0x20000,
		F3D_SHADER_UNIFORM_RESERVED_1 = 0x40000,
		F3D_SHADER_UNIFORM_RESERVED_2 = 0x80000,
		F3D_SHADER_ATTR_POSITION = 0x100000,
		F3D_SHADER_ATTR_NORMAL = 0x200000,
		F3D_SHADER_ATTR_COLOR = 0x400000,
		F3D_SHADER_ATTR_UV = 0x800000,
		F3D_SHADER_ATTR_RESERVED_1 = 0x1000000,
		F3D_SHADER_ATTR_RESERVED_2 = 0x2000000,
		F3D_SHADER_VULKAN_TRANSFORM_Z = 0x4000000,
		F3D_SHADER_VULKAN_TRANSFORM_Y = 0x8000000,
		F3D_SHADER_BEGIN_RANGE = F3D_SHADER_UNDEFINED,
		F3D_SHADER_END_RANGE = F3D_SHADER_VULKAN_TRANSFORM_Y,
		F3D_SHADER_RANGE_SIZE = (F3D_SHADER_END_RANGE - F3D_SHADER_BEGIN_RANGE + 1),
		F3D_SHADER_MAX_ENUM = 0xFFFFFFFF
	}								eShaderInterfaceTypeBits;
	typedef F3D_Flags				ShaderInterfaceTypeFlags;

	typedef enum					eShadingType {
		F3D_SHADING_UNDEFINED = 0x0,
		F3D_SHADING_DIFFUSE_FLAT = 0x2,
		F3D_SHADING_DIFFUSE_LAMBERT = 0x04,
		F3D_SHADING_DIFFUSE_ORENNAYAR = 0x08,
		F3D_SHADING_DIFFUSE_TOON = 0x10,
		F3D_SHADING_DIFFUSE_RESERVED_1 = 0x20,
		F3D_SHADING_DIFFUSE_RESERVED_2 = 0x40,
		F3D_SHADING_DIFFUSE_RESERVED_3 = 0x80,
		F3D_SHADING_SPECULAR_PHONG = 0x100,
		F3D_SHADING_SPECULAR_BLINN_PHONG = 0x200,
		F3D_SHADING_SPECULAR_BECKMANN = 0x400,
		F3D_SHADING_SPECULAR_COOK_TORRANCE = 0x800,
		F3D_SHADING_SPECULAR_WARD = 0x1000,
		F3D_SHADING_SPECULAR_GAUSSIAN = 0x2000,
		F3D_SHADING_SPECULAR_RESERVED_1 = 0x4000,
		F3D_SHADING_SPECULAR_RESERVED_2 = 0x8000,
		F3D_SHADING_BEGIN_RANGE = F3D_SHADING_UNDEFINED,
		F3D_SHADING_END_RANGE = (F3D_SHADING_SPECULAR_RESERVED_2 - F3D_SHADING_UNDEFINED + 1),
		F3D_SHADING_DIFFUSE_MAX_ENUM = 0xFFFFFFFF
	}								eShadingTypeBits;
	typedef F3D_Flags				ShadingTypeFlags;

	typedef struct					s_ProgramMaskFields {
		ShaderInterfaceTypeFlags	interfaceMask;
		ShadingTypeFlags			shadingMask;
	}								ProgramMaskFields;
	typedef union					s_ProgramMask {
		ProgramMaskFields			fields;
		uint64_t					mask;
	}								ProgramMask;

	typedef enum			eRenderPassType {
		F3D_RENDERPASS_UNDEFINED = 0,
		F3D_RENDERPASS_SIMPLE = 1,
		F3D_RENDERPASS_COMPOSED = 2,
		F3D_RENDERPASS_BEGIN_RANGE = F3D_RENDERPASS_UNDEFINED,
		F3D_RENDERPASS_END_RANGE = F3D_RENDERPASS_SIMPLE,
		F3D_RENDERPASS_RANGE_SIZE = (F3D_RENDERPASS_SIMPLE - F3D_RENDERPASS_UNDEFINED + 1),
		F3D_RENDERPASS_MAX_ENUM = 0x7FFFFFFF
	}						RenderPassType;

} // f3d::

#endif